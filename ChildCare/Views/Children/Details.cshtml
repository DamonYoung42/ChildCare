@model ChildCare.Models.Child
<script src="~/Scripts/jquery.min.js" type="text/javascript"></script>
<script src="~/Scripts/moment.min.js" type="text/javascript"></script>
<script src="~/Scripts/fullcalendar.js" type="text/javascript"></script>
<script src="~/Scripts/bootstrap.min.js" type="text/javascript"></script>
<script type="text/javascript" src="https://cdn.emailjs.com/dist/email.min.js"></script>
<script type="text/javascript">
   (function(){
      emailjs.init("user_tIcH8dgH3kLvB4KvXo9iQ");
   })();
</script>

<link rel='stylesheet' href='~/Content/fullcalendar.min.css' />
@{
    ViewBag.Title = "Details";
}

@Html.AntiForgeryToken()
@Html.HiddenFor(model => model.Id)
<div>
    <h2>Child Profile</h2>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.FirstName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.GradeLevel)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.GradeLevel)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Teacher)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Teacher.LastName)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Medications)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Medications)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Notes)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Notes)
        </dd>

        <dt>
            @*@Html.DisplayNameFor(model => model.Photo)*@
        </dt>

        <dd>
            <img src="~/Images/Child/@Html.DisplayFor(model => model.Photo)" style="height:100px;width:100px;" />
            @*Html.DisplayFor(model => model.Photo)*@
        </dd>

        @if (User.IsInRole("Employee"))
        {
            <dt></dt>
            <dd></dd>
            <dt></dt>
            <dd><button type="button" class="btn btn-primary" id="signOut" onclick="SignOut()">Sign out</button></dd>
        }

    </dl>

</div>

<div class="container">
    <div class="row">
        <div class="col-sm-12">
            <div id="calendar"></div>
        </div>
    </div>
</div>

<div id="deleteModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                <h4 id="modalTitle" class="modal-title">Pickup</h4>
            </div>
            <div id="deleteModalBody" class="modal-body"></div>
                <input type="hidden" id="deleteModalEventId" />
                <input type="hidden" id="deleteModalCalEventId" />

            <div class="modal-footer">
                <button class="btn btn-danger" onclick="DeleteEvent($('#deleteModalEventId').val(), $('#deleteModalCalEventId').val())">Delete</></button>
                <button type="button" class="btn btn-primary" id="deleteModalClose" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="createModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                <h4 id="createModalTitle" class="modal-title">Pickup</h4>
            </div>
            <div id="createModalBody" class="modal-body"></div>
                <input type="hidden" id="createModalDate" />
                <input type="hidden"  id="createModalChildId" />
                <input type="hidden"  id="createModalPickupTime" />
                <input type="hidden"  id="createModaltitle" />
                <input type="hidden"  id="createModalstart" />
                <input type="hidden"  id="createModalend" />
                <input type="hidden"  id="createModalallDay" />
                <input type="hidden" id="createModaleditable" />
            
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="CreateEvent()">Save</></button>
                <button type="button" class="btn" id="createModalClose" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<p></p>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>


<script type="text/javascript">

    $(document).ready(function () {

        $('#calendar').fullCalendar({
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay'
            },

            views: {
                month: {
                    editable: false,
                },
                agenda: {
                    editable: true,
                }
            },
            timezone: 'local',
            weekends: true,
            height: 500,
            cache: true,
            allDay: false,
            displayEventTime: true,
            defaultTimedEventDuration: '00:30:00',
            forceEventDuration: true,
            slotDuration: '00:30:00',
            eventOverlap: false,
            events: {
                url: '@Url.Action("GetCalendarEvents", "Children")',
                type: 'GET',
                data: {Id: @Model.Id},
                error: function () {
                    alert('There was an error retrieving calendar events!');
                },
            },

            eventClick:  function(event, jsEvent, view) {
                $('#deleteModalTitle').html(event.title);
                $('#deleteModalBody').html(moment(event.start).format('MM-DD-YYYY h:mm A'));
                $('#deleteModalEventId').val(event.Id);
                $('#deleteModalCalEventId').val(event._id);
                $('#deleteModal').modal();
            },

            eventDrop: function (event) {
                EditEvent(event);
            },
            dayClick: function (date, allDay, jsEvent, view) {
                var check = moment(date._d).format('MM-DD-YYYY');
                var today = moment(new Date()).format('MM-DD-YYYY');

                if (check >= today){
                    if ($('#calendar').fullCalendar('getView').type != 'month')
                    {
                        $('#createModalTitle').html("Pickup");
                        $('#createModalBody').html(moment(date._d).format('MM-DD-YYYY h:mm A'));
                        $('#createModalDate').val(moment(date._d).format('MM-DD-YYYY'));
                        $('#createModalChildId').val(@Model.Id);
                        $('#createModalPickupTime').val(moment(date._d).format('MM-DD-YYYY'));
                        $('#createModaltitle').val("Pickup");
                        $('#createModalstart').val(moment(date._d).format('MM-DD-YYYY h:mm A'));
                        $('#createModalend').val(moment(date._d).format('MM-DD-YYYY h:mm A'));
                        $('#createModaleditable').val("true");
                        $('#createModalallDay').val("false");

                        $('#createModal').modal();
                    }
                    else {
                        $('#calendar').fullCalendar( 'changeView', 'agendaWeek' )
                        $('#calendar').fullCalendar('gotoDate', date);
                    }
                }
            },
            @*dayClick: function (date, allDay, jsEvent, view) {

                $('#createModalTitle').html("Pickup");
                $('#createModalBody').html(moment(date._d).format('MM-DD-YYYY h:mm A'));
                $('#createModalDate').val(moment(date._d).format('MM-DD-YYYY'));
                $('#createModalChildId').val(@Model.Id);
                $('#createModalPickupTime').val(moment(date._d).format('MM-DD-YYYY'));
                $('#createModaltitle').val("Pickup");
                $('#createModalstart').val(moment(date._d).format('MM-DD-YYYY h:mm A'));
                $('#createModalend').val(moment(date._d).format('MM-DD-YYYY h:mm A'));
                $('#createModaleditable').val("true");
                $('#createModalallDay').val("false");

                $('#createModal').modal();
            },*@

            eventConstraint: {
                start: "16:00",
                end: "18:00"

            }

        });

        //Disable/enable signout button
        //if (PickupToday())
        //{
        //    $('#signOut').prop('disabled', false);
        //}
        //else
        //{
        //    $('#signOut').prop('disabled', true);
        //}
        });

        function EditEvent(data) {

            $.ajax({
                url: '../../Attendances/Edit',
                type: "POST",
                dataType: "json",
                data: ({
                    __RequestVerificationToken: $('[name= "__RequestVerificationToken"]').val(),
                    Date: data.start.format('MM-DD-YYYY'),
                    ChildId: @Model.Id,
                    PickupTime: data.end.format('MM-DD-YYYY'),
                    Id: data.Id,
                    title: data.title,
                    start: data.start.format('MM-DD-YYYY hh:mm A'),
                    end: data.end.format('MM-DD-YYYY hh:mm A'),
                    allday: data.allDay,
                    editable: data.editable
                }),
                success: function (data, textStatus) {
                    if (!data) {
                        alert("Changes could not be saved.");
                        return;
                    }
                    calendar.fullCalendar('updateEvent', event);
                },
            });
        };

        function DeleteEvent(Id, CalEventId) {
            $.ajax({
                url: '../../Attendances/Delete/' + Id,
                type: "POST",
                dataType: "json",
                data: ({
                    __RequestVerificationToken: $('[name= "__RequestVerificationToken"]').val()
                }),

                success: function (data, textStatus) {
                    if (!data) {
                        alert("Event could not be deleted.");
                        return;
                    }

                },
            });
            $('#calendar').fullCalendar('removeEvents', CalEventId);
            $('#deleteModalClose').click();
        };

        function CreateEvent() {

            $.ajax({
                url: '../../Attendances/Create',
                type: "POST",
                dataType: "json",
                data: ({
                    __RequestVerificationToken: $('[name= "__RequestVerificationToken"]').val(),
                    Date: $('#createModalDate').val(),
                    ChildId: $('#createModalChildId').val(),
                    PickupTime: $('#createModalPickupTime').val(),
                    Id: $('#createModalId').val(),
                    title: $('#createModaltitle').val(),
                    start: $('#createModalstart').val(),
                    end: $('#createModalend').val(),
                    allday:$('#createModalallDay').val(),
                    editable: $('#createModaleditable').val(),
                }),

                success: function (data, textStatus) {
                    if (!data) {
                        alert("Event could not be created.");
                        return;
                    }
                }
            });

            $('#calendar').fullCalendar('renderEvent', { title: "Pickup", start: $('#createModalstart').val(), end: $('#createModalend').val() }, true);
            $('#createModalClose').click();
        };

    //function PickupToday()
    //    {

    //    };

    function SignOut()
        {

        var todayAttendance;
        $.ajax({
            async: false,
            url: '../../Attendances/PickupToday',
            type: "GET",
            dataType: "json",
            data: {
                Id: @Model.Id,
            },
            success: function (data, textStatus) {
                if (!data) {
                    alert("This child is not enrolled today.");
                    return;
                }
                else{
                    todayAttendance = data;
                }
            }
        });

        $.ajax({
            url: '../../Attendances/Edit',
            async: false,
            type: "POST",
            dataType: "json",
            data: ({
                __RequestVerificationToken: $('[name= "__RequestVerificationToken"]').val(),
                Date: moment(todayAttendance[0].b.Date).format('MM-DD-YYYY'),
                ChildId: @Model.Id,
                PickupTime: moment(new Date()).format('MM-DD-YYYY hh:mm A'),
                Id: todayAttendance[0].b.Id,
                title: todayAttendance[0].b.title,
                start: moment(todayAttendance[0].b.start).format('MM-DD-YYYY hh:mm A'),
                end: moment(todayAttendance[0].b.end).format('MM-DD-YYYY hh:mm A'),
                allday: false,
                editable: false
            }),

            success: function (data, textStatus) {
                if (!data) {
                    alert("Child could not be signed out.");
                    return;
                }
            },
        });

        $.ajax({
            async: false,
            url: '../../Attendances/PickupToday',
            type: "GET",
            dataType: "json",
            data: {
                Id: @Model.Id,
            },
            success: function (data, textStatus) {
                if (!data) {
                    alert("This child is not enrolled today.");
                    return;
                }
                else{
                    todayAttendance = data;
                }
            }
        });
        SendEmail(todayAttendance);
    };

    function SendEmail(params)
    {
        // parameters: service_id, template_id, template_parameters
        emailjs.send("default_service","student_signout",{to_name: params[0].FirstName, send_to: params[0].Email, student_name: params[0].b.Child.FirstName, message_html: params[0].b.Child.FirstName + " was signed out of child care at " + moment(params[0].b.PickupTime).format('h:mm A') + "."});

    }

</script>

